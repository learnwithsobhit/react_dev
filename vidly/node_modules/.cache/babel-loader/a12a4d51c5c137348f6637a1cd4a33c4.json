{"ast":null,"code":"import _defineProperty from \"/home/shobhit/react_dev/Section 9- Authentication and Authorization/Section 9- Authentication and Authorization/finish/vidly/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/shobhit/react_dev/Section 9- Authentication and Authorization/Section 9- Authentication and Authorization/finish/vidly/src/components/movies.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport MoviesTable from \"./moviesTable\";\nimport ListGroup from \"./common/listGroup\";\nimport Pagination from \"./common/pagination\";\nimport { getMovies, deleteMovie } from \"../services/movieService\";\nimport { getGenres } from \"../services/genreService\";\nimport { paginate } from \"../utils/paginate\";\nimport _ from \"lodash\";\nimport SearchBox from \"./searchBox\";\n\nclass Movies extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: [],\n      genres: [],\n      currentPage: 1,\n      pageSize: 4,\n      searchQuery: \"\",\n      selectedGenre: null,\n      sortColumn: {\n        path: \"title\",\n        order: \"asc\"\n      }\n    };\n\n    this.handleDelete = async movie => {\n      const originalMovies = this.state.movies;\n      const movies = originalMovies.filter(m => m._id !== movie._id);\n      this.setState({\n        movies\n      });\n\n      try {\n        await deleteMovie(movie._id);\n      } catch (ex) {\n        if (ex.response && ex.response.status === 404) toast.error(\"This movie has already been deleted.\");\n        this.setState({\n          movies: originalMovies\n        });\n      }\n    };\n\n    this.handleLike = movie => {\n      const movies = [...this.state.movies];\n      const index = movies.indexOf(movie);\n      movies[index] = _objectSpread({}, movies[index]);\n      movies[index].liked = !movies[index].liked;\n      this.setState({\n        movies\n      });\n    };\n\n    this.handlePageChange = page => {\n      this.setState({\n        currentPage: page\n      });\n    };\n\n    this.handleGenreSelect = genre => {\n      this.setState({\n        selectedGenre: genre,\n        searchQuery: \"\",\n        currentPage: 1\n      });\n    };\n\n    this.handleSearch = query => {\n      this.setState({\n        searchQuery: query,\n        selectedGenre: null,\n        currentPage: 1\n      });\n    };\n\n    this.handleSort = sortColumn => {\n      this.setState({\n        sortColumn\n      });\n    };\n\n    this.getPagedData = () => {\n      const _this$state = this.state,\n            pageSize = _this$state.pageSize,\n            currentPage = _this$state.currentPage,\n            sortColumn = _this$state.sortColumn,\n            selectedGenre = _this$state.selectedGenre,\n            searchQuery = _this$state.searchQuery,\n            allMovies = _this$state.movies;\n      let filtered = allMovies;\n      if (searchQuery) filtered = allMovies.filter(m => m.title.toLowerCase().startsWith(searchQuery.toLowerCase()));else if (selectedGenre && selectedGenre._id) filtered = allMovies.filter(m => m.genre._id === selectedGenre._id);\n\n      const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n\n      const movies = paginate(sorted, currentPage, pageSize);\n      return {\n        totalCount: filtered.length,\n        data: movies\n      };\n    };\n  }\n\n  async componentDidMount() {\n    const _ref = await getGenres(),\n          data = _ref.data;\n\n    const genres = [{\n      _id: \"\",\n      name: \"All Genres\"\n    }, ...data];\n\n    const _ref2 = await getMovies(),\n          movies = _ref2.data;\n\n    this.setState({\n      movies,\n      genres\n    });\n  }\n\n  render() {\n    const count = this.state.movies.length;\n    const _this$state2 = this.state,\n          pageSize = _this$state2.pageSize,\n          currentPage = _this$state2.currentPage,\n          sortColumn = _this$state2.sortColumn,\n          searchQuery = _this$state2.searchQuery;\n    const user = this.props.user;\n    if (count === 0) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"There are no movies in the database.\");\n\n    const _this$getPagedData = this.getPagedData(),\n          totalCount = _this$getPagedData.totalCount,\n          movies = _this$getPagedData.data;\n\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(ListGroup, {\n      items: this.state.genres,\n      selectedItem: this.state.selectedGenre,\n      onItemSelect: this.handleGenreSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, user && React.createElement(Link, {\n      to: \"/movies/new\",\n      className: \"btn btn-primary\",\n      style: {\n        marginBottom: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"New Movie\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Showing \", totalCount, \" movies in the database.\"), React.createElement(SearchBox, {\n      value: searchQuery,\n      onChange: this.handleSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(MoviesTable, {\n      movies: movies,\n      sortColumn: sortColumn,\n      onLike: this.handleLike,\n      onDelete: this.handleDelete,\n      onSort: this.handleSort,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(Pagination, {\n      itemsCount: totalCount,\n      pageSize: pageSize,\n      currentPage: currentPage,\n      onPageChange: this.handlePageChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Movies;","map":{"version":3,"sources":["/home/shobhit/react_dev/Section 9- Authentication and Authorization/Section 9- Authentication and Authorization/finish/vidly/src/components/movies.jsx"],"names":["React","Component","Link","toast","MoviesTable","ListGroup","Pagination","getMovies","deleteMovie","getGenres","paginate","_","SearchBox","Movies","state","movies","genres","currentPage","pageSize","searchQuery","selectedGenre","sortColumn","path","order","handleDelete","movie","originalMovies","filter","m","_id","setState","ex","response","status","error","handleLike","index","indexOf","liked","handlePageChange","page","handleGenreSelect","genre","handleSearch","query","handleSort","getPagedData","allMovies","filtered","title","toLowerCase","startsWith","sorted","orderBy","totalCount","length","data","componentDidMount","name","render","count","user","props","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport MoviesTable from \"./moviesTable\";\nimport ListGroup from \"./common/listGroup\";\nimport Pagination from \"./common/pagination\";\nimport { getMovies, deleteMovie } from \"../services/movieService\";\nimport { getGenres } from \"../services/genreService\";\nimport { paginate } from \"../utils/paginate\";\nimport _ from \"lodash\";\nimport SearchBox from \"./searchBox\";\n\nclass Movies extends Component {\n  state = {\n    movies: [],\n    genres: [],\n    currentPage: 1,\n    pageSize: 4,\n    searchQuery: \"\",\n    selectedGenre: null,\n    sortColumn: { path: \"title\", order: \"asc\" }\n  };\n\n  async componentDidMount() {\n    const { data } = await getGenres();\n    const genres = [{ _id: \"\", name: \"All Genres\" }, ...data];\n\n    const { data: movies } = await getMovies();\n    this.setState({ movies, genres });\n  }\n\n  handleDelete = async movie => {\n    const originalMovies = this.state.movies;\n    const movies = originalMovies.filter(m => m._id !== movie._id);\n    this.setState({ movies });\n\n    try {\n      await deleteMovie(movie._id);\n    } catch (ex) {\n      if (ex.response && ex.response.status === 404)\n        toast.error(\"This movie has already been deleted.\");\n\n      this.setState({ movies: originalMovies });\n    }\n  };\n\n  handleLike = movie => {\n    const movies = [...this.state.movies];\n    const index = movies.indexOf(movie);\n    movies[index] = { ...movies[index] };\n    movies[index].liked = !movies[index].liked;\n    this.setState({ movies });\n  };\n\n  handlePageChange = page => {\n    this.setState({ currentPage: page });\n  };\n\n  handleGenreSelect = genre => {\n    this.setState({ selectedGenre: genre, searchQuery: \"\", currentPage: 1 });\n  };\n\n  handleSearch = query => {\n    this.setState({ searchQuery: query, selectedGenre: null, currentPage: 1 });\n  };\n\n  handleSort = sortColumn => {\n    this.setState({ sortColumn });\n  };\n\n  getPagedData = () => {\n    const {\n      pageSize,\n      currentPage,\n      sortColumn,\n      selectedGenre,\n      searchQuery,\n      movies: allMovies\n    } = this.state;\n\n    let filtered = allMovies;\n    if (searchQuery)\n      filtered = allMovies.filter(m =>\n        m.title.toLowerCase().startsWith(searchQuery.toLowerCase())\n      );\n    else if (selectedGenre && selectedGenre._id)\n      filtered = allMovies.filter(m => m.genre._id === selectedGenre._id);\n\n    const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n\n    const movies = paginate(sorted, currentPage, pageSize);\n\n    return { totalCount: filtered.length, data: movies };\n  };\n\n  render() {\n    const { length: count } = this.state.movies;\n    const { pageSize, currentPage, sortColumn, searchQuery } = this.state;\n    const { user } = this.props;\n\n    if (count === 0) return <p>There are no movies in the database.</p>;\n\n    const { totalCount, data: movies } = this.getPagedData();\n\n    return (\n      <div className=\"row\">\n        <div className=\"col-3\">\n          <ListGroup\n            items={this.state.genres}\n            selectedItem={this.state.selectedGenre}\n            onItemSelect={this.handleGenreSelect}\n          />\n        </div>\n        <div className=\"col\">\n          {user && (\n            <Link\n              to=\"/movies/new\"\n              className=\"btn btn-primary\"\n              style={{ marginBottom: 20 }}\n            >\n              New Movie\n            </Link>\n          )}\n          <p>Showing {totalCount} movies in the database.</p>\n          <SearchBox value={searchQuery} onChange={this.handleSearch} />\n          <MoviesTable\n            movies={movies}\n            sortColumn={sortColumn}\n            onLike={this.handleLike}\n            onDelete={this.handleDelete}\n            onSort={this.handleSort}\n          />\n          <Pagination\n            itemsCount={totalCount}\n            pageSize={pageSize}\n            currentPage={currentPage}\n            onPageChange={this.handlePageChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Movies;\n"]},"metadata":{},"sourceType":"module"}